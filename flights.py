#!/usr/bin/python3
# this file is called flights.py

# WHAT THIS DOES:
# ---------------------------------------------------------------
#
# 1) Read aircraft.json generated by dump1090-fa.
# 2) check to see if we are looking for this icao, flightpattern or squawk
# 3) send a telegram message to a defined channel

import datetime
import json
import time
import syslog
import telegram
import re

################################################################
# Define Telegram Bot token
bot = telegram.Bot(token="")

# Define flights to watch for
icaolist = {
        'a6aa75': 'B29 flying fortress',
        'a6aa76': 'B29 flying fortress',
        '508035': 'AN-224'
}

flightlist = {
	'BGA': 'Beluga',
        'FDX1': 'R & C plane of love',
        'AIB': 'Airbus'
#        'JU52': 'JU52',
#        'DAQUI': 'JU52'
}

# Define Squawks to watch for
squawklist = {
#	'7402':'GA Test back',
#        '6303':'JU-Air',
        '7500':'ijacking; seven-five – man with a knife)',
        '7600':'radio failure; seven-six – hear nix / radio nix / need a radio fix)',
        '7700':'emergency; seven-seven – going to heaven / falling from heaven / pray to heaven / close to heaven)'
}

# Set your Telegram ChannelID
def sendTelegram(msg_content):
   bot.sendMessage(chat_id='1184637014', text=msg_content, disable_web_page_preview=True)
   return None

def processAircraftList( aircraftList, icaolist, flightlist, squawklist, processed):

        for aircraft in aircraftList:
             hexcode = aircraft["hex"]
             msg_content = ''
             additional_infos = ''
             squawk = ''
             flight = ''
             if 'squawk' in aircraft:
               squawk = aircraft["squawk"]
             #print(aircraft)
             if "flight" in aircraft:
                flight = aircraft["flight"].strip()
             if hexcode in icaolist or any(code in flight for code in flightlist) or squawk in squawklist:
                syslog.syslog('Match ' + flight)
                if hexcode not in processed:
                    processed[hexcode] = datetime.datetime.now().replace(microsecond=0)
                    msg_content += 'http://tar1090.adsbexchange.com/?icao=' + hexcode + '   \n'
                    msg_content += 'https://www.planespotters.net/hex/' + hexcode.upper() + '   \n'
                    if hexcode in icaolist:
                        additional_infos += icaolist[hexcode] + '  \n'
                    if flight:
                      msg_content += 'https://www.radarbox.com/data/flights/' + flight + '   \n'
                      if any(code in flight for code in flightlist):
                        additional_infos += next((v for k, v in flightlist.items() if k in flight), None) + '  \n'
                    if squawk:
                      if squawk in squawklist:
                        msg_content += 'Squawk: ' + squawk + ' ' + squawklist[squawk]
                      else:
                        msg_content += 'Squawk: ' + squawk
                    msg_content += additional_infos
                    syslog.syslog(msg_content)
                    sendTelegram(msg_content)
                else:
                    # we are tracking this aircraft and have already sent a telegram message. Just update the timestamp.
                    processed[hexcode] = datetime.datetime.now().replace(microsecond=0)
#                   dd print ('updated timestamp for ', hexcode )

# if the last time we saw the aircraft is more than 'goneaway' seconds old, then we will assume it landed or flew away.
# if it shows up again, we will send another email.
goneaway = 1200

syslog.syslog('Hi, flights.py starting up')  # just for fun
# create dictionary for flights currently being tracked
processed = {'start':datetime.datetime.now() }
while True:
# Read dump1090-mutability's aircraft.json.
        with open('/run/dump1090-fa/aircraft.json') as data_file:
            data = json.load(data_file)
            processAircraftList(data["aircraft"], icaolist, flightlist, squawklist, processed)

# remove entry from processed dictionary if not seen in the last 'goneaway' seconds
            for hexcode in list(processed) :
                 if processed[hexcode]  < datetime.datetime.now() - datetime.timedelta(seconds= goneaway) :
#                    print ('removing ', hexcode)
                    del processed[hexcode]
            # have a rest, then look again at the json file
            time.sleep(30)
#
###################################################################################################
